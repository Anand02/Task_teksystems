{"version":3,"sources":["logo.svg","components/CellDesign.jsx","components/RowDessign.jsx","components/MainBoard.jsx","components/Home.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","CellDesign","props","data","isOpen","hasMine","className","onContextMenu","e","preventDefault","onClick","open","style","color","count","flag","hasFlag","RowDessign","cells","this","map","index","key","React","Component","MainBoard","createBoard","board","i","rows","push","j","columns","x","y","totalMines","randomRow","Math","floor","random","randomCol","cell","status","state","setState","changeFlagAmount","Promise","resolve","findMines","then","numberOfMines","current","console","log","newRows","onCellClick","openAroundCell","endGame","minesInProximity","row","col","length","nextProps","Home","handleCellClick","gameStatus","setInterval","tick","prevState","tik","t","intervals","reset","clearInterval","Object","assign","baseState","time","Winner","alert","amount","flagCount","nextState","minutes","formattedSeconds","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.1401e191.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from \"react\";\r\n\r\nconst CellDesign = props => {\r\n  let cell = () => {\r\n    if (props.data.isOpen) {\r\n      if (props.data.hasMine) {\r\n        return (\r\n          <div\r\n            className=\"cell open\"\r\n            onContextMenu={e => {\r\n              e.preventDefault();\r\n            }}\r\n            onClick={() => props.open(props.data)}\r\n          >\r\n            <span><p style={{color:'black'}}>fail</p></span>\r\n          </div>\r\n        );\r\n      } else if (props.data.count === 0) {\r\n        return (\r\n          <div\r\n            className=\"cell open\"\r\n            onContextMenu={e => {\r\n              e.preventDefault();\r\n              props.flag(props.data);\r\n            }}\r\n            onClick={() => props.open(props.data)}\r\n          />\r\n        );\r\n      } else {\r\n        return (\r\n          <div\r\n            className=\"cell open\"\r\n            onContextMenu={e => {\r\n              e.preventDefault();\r\n            }}\r\n            onClick={() => props.open(props.data)}\r\n          >\r\n            {props.data.count}\r\n          </div>\r\n        );\r\n      }\r\n    } else if (props.data.hasFlag) {\r\n      return (\r\n        <div\r\n          className=\"cell open-flag\"\r\n          onContextMenu={e => {\r\n            e.preventDefault();\r\n            props.flag(props.data);\r\n          }}\r\n          onClick={() => props.open(props.data)}\r\n        >\r\n          <span><p style={{color:'black'}}>fail</p></span>\r\n        </div>\r\n      );\r\n    } else {\r\n      return (\r\n        <div\r\n          className=\"cell\"\r\n          onContextMenu={e => {\r\n            e.preventDefault();\r\n            props.flag(props.data);\r\n          }}\r\n          onClick={() => props.open(props.data)}\r\n        />\r\n      );\r\n    }\r\n  };\r\n  return cell();\r\n};\r\n\r\nexport default CellDesign;","import React from \"react\";\r\nimport CellDesign from './CellDesign';\r\n\r\nclass RowDessign extends React.Component{\r\n\r\n  render(){\r\n\r\n    let cells = this.props.cells.map((data, index) => (\r\n      <CellDesign data={data} open={this.props.open} flag={this.props.flag} key={index} />\r\n    ));\r\n\r\n    return(\r\n      <div className=\"row\">{cells}</div>\r\n    )\r\n  }\r\n\r\n}\r\n\r\nexport default RowDessign;","import React, { Component } from \"react\";\r\nimport RowDessign from './RowDessign';\r\n\r\nclass MainBoard extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      rows: this.createBoard(props)\r\n    };\r\n  }\r\n\r\n  componentWillReceiveProps(nextProps) {\r\n    if (\r\n      this.props.open > nextProps.open ||\r\n      this.props.columns !== nextProps.columns\r\n    ) {\r\n      this.setState({\r\n        rows: this.createBoard(nextProps)\r\n      });\r\n    }\r\n  }\r\n\r\n  createBoard = props => {\r\n    let board = [];\r\n    for (let i = 0; i < props.rows; i++) {\r\n      board.push([]);\r\n      for (let j = 0; j < props.columns; j++) {\r\n        board[i].push({\r\n          x: j,\r\n          y: i,\r\n          count: 0,\r\n          isOpen: false,\r\n          hasMine: false,\r\n          hasFlag: false\r\n        });\r\n      }\r\n    }\r\n   \r\n    for (let i = 0; i < props.totalMines; i++) {\r\n      let randomRow = Math.floor(Math.random() * props.rows);\r\n      let randomCol = Math.floor(Math.random() * props.columns);\r\n\r\n      let cell = board[randomRow][randomCol];\r\n\r\n      if (cell.hasMine) {\r\n        i--;\r\n      } else {\r\n        cell.hasMine = true;\r\n      }\r\n    }\r\n    return board;\r\n  };\r\n\r\n\r\n  flag = cell => {\r\n    if (this.props.status === \"ended\") {\r\n      return;\r\n    }\r\n    let rows = this.state.rows;\r\n\r\n    cell.hasFlag = !cell.hasFlag;\r\n    this.setState({ rows });\r\n    this.props.changeFlagAmount(cell.hasFlag ? -1 : 1);\r\n  };\r\n\r\n  open = cell => {\r\n    if (this.props.status === \"ended\") {\r\n      return;\r\n    }\r\n    let asyncCountMines = new Promise(resolve => {\r\n      let mines = this.findMines(cell);\r\n      resolve(mines);\r\n    });\r\n\r\n    asyncCountMines.then(numberOfMines => {\r\n      let rows = this.state.rows;\r\n\r\n      let current = rows[cell.y][cell.x];\r\n\r\n      if (current.hasMine && this.props.open === 0) {\r\n        console.log(\"mine was on first click\");\r\n        let newRows = this.createBoard(this.props);\r\n        this.setState({ rows: newRows }, () => {\r\n          this.open(cell);\r\n        });\r\n      } else {\r\n        if (!cell.hasFlag && !current.isOpen) {\r\n          this.props.onCellClick();\r\n\r\n          current.isOpen = true;\r\n          current.count = numberOfMines;\r\n\r\n          this.setState({ rows });\r\n          if (!current.hasMine && numberOfMines === 0) {\r\n            this.openAroundCell(cell);\r\n          }\r\n\r\n          if (current.hasMine && this.props.open !== 0) {\r\n            this.props.endGame();\r\n          }\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  findMines = cell => {\r\n    let minesInProximity = 0;\r\n    for (let row = -1; row <= 1; row++) {\r\n      for (let col = -1; col <= 1; col++) {\r\n        if (cell.y + row >= 0 && cell.x + col >= 0) {\r\n          if (\r\n            cell.y + row < this.state.rows.length &&\r\n            cell.x + col < this.state.rows[0].length\r\n          ) {\r\n            if (\r\n              this.state.rows[cell.y + row][cell.x + col].hasMine &&\r\n              !(row === 0 && col === 0)\r\n            ) {\r\n              minesInProximity++;\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n    return minesInProximity;\r\n  };\r\n\r\n  openAroundCell = cell => {\r\n    let rows = this.state.rows;\r\n    for (let row = -1; row <= 1; row++) {\r\n      for (let col = -1; col <= 1; col++) {\r\n        if (cell.y + row >= 0 && cell.x + col >= 0) {\r\n          if (\r\n            cell.y + row < this.state.rows.length &&\r\n            cell.x + col < this.state.rows[0].length\r\n          ) {\r\n            if (\r\n              !this.state.rows[cell.y + row][cell.x + col].hasMine &&\r\n              !rows[cell.y + row][cell.x + col].isOpen\r\n            ) {\r\n              this.open(rows[cell.y + row][cell.x + col]);\r\n            }\r\n          }\r\n        }\r\n      }\r\n    }\r\n  };\r\n\r\n  render() {\r\n    let rows = this.state.rows.map((cells, index) => (\r\n      <RowDessign\r\n        cells={cells}\r\n        open={this.open}\r\n        flag={this.flag}\r\n        key={index}\r\n      />\r\n    ));\r\n    return <div className=\"board\">{rows}</div>;\r\n  }\r\n}\r\n\r\n\r\nexport default MainBoard;","import  React from 'react';\r\nimport MainBoard from './MainBoard';\r\n\r\nclass Home extends React.Component{\r\n\r\n    constructor() {\r\n        super();\r\n    \r\n        this.state = {\r\n          rows: 10,\r\n          columns: 10, \r\n          time: 0, \r\n          flagCount: 10,\r\n          open: 0,\r\n          totalMines: 10,\r\n          rows: 10,\r\n          columns: 10,\r\n          gameStatus: \"waiting\",\r\n        };\r\n    \r\n      }\r\n\r\n      handleCellClick = () => {\r\n        if (this.state.open === 0 && this.state.gameStatus !== \"running\") {\r\n          this.setState(\r\n            {\r\n              gameStatus: \"running\"\r\n            },\r\n            this.setInterval(this.tick, 1000)\r\n          );\r\n        }\r\n        this.setState(prevState => {\r\n          return { open: prevState.open + 1 };\r\n        });\r\n      };\r\n\r\n      \r\n      componentWillMount() {\r\n        this.intervals = [];\r\n      }\r\n\r\n    \r\n      setInterval = (tik, t) => {\r\n        this.intervals.push(setInterval(tik, t));\r\n      };\r\n\r\n    \r\n      reset = () => {\r\n        this.intervals.map(clearInterval);\r\n        this.setState(Object.assign({}, this.baseState), () => {\r\n          this.intervals = [];\r\n        });\r\n      };\r\n    \r\n      tick = () => {\r\n        if (this.state.open > 0 && this.state.gameStatus === \"running\") {\r\n          let time = this.state.time + 1;\r\n          this.setState({ time });\r\n        }\r\n      };\r\n    \r\n      endGame = () => {\r\n        this.setState({\r\n          gameStatus: \"ended\"\r\n        });\r\n      };\r\n\r\n      Winner = () => {\r\n        if (this.state.totalMines + this.state.open >= this.state.rows * this.state.columns) {\r\n          this.setState({\r\n            gameStatus: \"winner\"\r\n          }, alert(\"WINNER\"))\r\n        }\r\n      }\r\n    \r\n      changeFlagAmount = amount => {\r\n        this.setState({ flagCount: this.state.flagCount + amount });\r\n      };\r\n      \r\n\r\n      componentDidUpdate(nextProps, nextState) {\r\n        if (this.state.gameStatus === \"running\") {\r\n          this.Winner();\r\n        }\r\n      }\r\n    \r\n     \r\n\r\n    render(){\r\n\r\n        console.log(\"props\",this.state)\r\n        let minutes = Math.floor(this.state.time / 60);\r\n        console.log(\"props\",minutes)\r\n        let formattedSeconds = this.state.time - minutes * 60 || 0;\r\n        console.log(\"props\",formattedSeconds)\r\n\r\n        formattedSeconds = formattedSeconds < 10 ? `0${formattedSeconds}` : formattedSeconds;\r\n        let time = `${minutes}:${formattedSeconds}`;\r\n\r\n        let gameStatus =this.state.gameStatus === \"running\" || this.state.gameStatus === \"waiting\" ? (\r\n              <p style={{color:'green'}}> W </p>\r\n            ) : (\r\n              <p style={{color:'red'}}> Fail </p>\r\n            );\r\n\r\n        return(\r\n            <div className=\"game\">\r\n                <h1 style={{color:'blue'}}>MINESWEEPER</h1>\r\n                <h2>Anand Gadag </h2>\r\n\r\n                <div className=\"board-head\">\r\n                    <div className=\"flag-count\"> {this.state.flagCount} </div>\r\n                        <button className=\"reset\" onClick={this.state.reset}>\r\n                            {gameStatus}\r\n                        </button>\r\n                    <div className=\"timer\">{time}</div>\r\n                </div>\r\n                \r\n                <MainBoard\r\n                    columns={this.state.columns}\r\n                    endGame={this.endGame}\r\n                    status={this.state.gameStatus}\r\n                    onCellClick={this.handleCellClick}\r\n                    open={this.state.open}\r\n                    totalMines={this.state.totalMines}\r\n                    rows={this.state.rows}\r\n                    changeFlagAmount={this.changeFlagAmount}\r\n                />\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Home","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport Home from './components/Home'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n     <Home />\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}